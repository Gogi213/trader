using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using TradingBot.Core.Abstractions;
using TradingBot.Core.Services;

namespace TradingBot.ConsoleHost;

public class Worker : BackgroundService
{
    private readonly ILogger<Worker> _logger;
    private readonly IWebSocketConsumerService _webSocketConsumerService;
    private readonly ITradingStrategyService _tradingStrategyService;
    private readonly ITradingStrategy _pmmStrategy;
    private readonly MexcApiTester _mexcApiTester;
    private readonly PmmTestHelper _pmmTestHelper;

    public Worker(ILogger<Worker> logger,
        IWebSocketConsumerService webSocketConsumerService,
        ITradingStrategyService tradingStrategyService,
        ITradingStrategy pmmStrategy,
        MexcApiTester mexcApiTester,
        PmmTestHelper pmmTestHelper)
    {
        _logger = logger;
        _webSocketConsumerService = webSocketConsumerService;
        _tradingStrategyService = tradingStrategyService;
        _pmmStrategy = pmmStrategy;
        _mexcApiTester = mexcApiTester;
        _pmmTestHelper = pmmTestHelper;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("Worker running at: {time}", DateTimeOffset.Now);

        // ========================================
        // –†–ï–ñ–ò–ú PMM –°–¢–†–ê–¢–ï–ì–ò–ò –° –ü–û–î–ì–û–¢–û–í–ö–û–ô
        // ========================================
        _logger.LogInformation("\n\nüìä –ó–ê–ü–£–°–ö PURE MARKET MAKING –°–¢–†–ê–¢–ï–ì–ò–ò\n");

        try
        {
            // –®–∞–≥ 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
            await _pmmTestHelper.ShowBalancesAsync(stoppingToken);

            // –®–∞–≥ 2: –ü–æ–∫—É–ø–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å XRP (1 USDT –Ω–∞ XRP)
            _logger.LogInformation("\n--- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –ø–æ–∫—É–ø–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ XRP ---");
            await _pmmTestHelper.BuyInitialXrpBalanceAsync(1m, stoppingToken);

            _logger.LogInformation("\n--- –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ---");
            await Task.Delay(5000, stoppingToken);

            // –®–∞–≥ 3: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
            await _pmmTestHelper.ShowBalancesAsync(stoppingToken);

            _logger.LogInformation("\n");

            // –®–∞–≥ 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            await _pmmStrategy.InitializeAsync(stoppingToken);

            _logger.LogInformation("\nüîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)\n");

            // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –≤—ã–ø–æ–ª–Ω—è–µ–º tick –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            // –û–≥—Ä–∞–Ω–∏—á–∏–º 10 –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
            int tickCount = 0;
            const int maxTicks = 10;

            while (!stoppingToken.IsCancellationRequested && tickCount < maxTicks)
            {
                try
                {
                    await _pmmStrategy.TickAsync(stoppingToken);
                    tickCount++;
                    _logger.LogInformation("--- Tick {Count}/{Max} –∑–∞–≤–µ—Ä—à–µ–Ω ---\n", tickCount, maxTicks);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ tick —Ü–∏–∫–ª–µ");
                }

                if (tickCount < maxTicks)
                {
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–∏–∫–∞–º–∏ (10 —Å–µ–∫—É–Ω–¥)
                    await Task.Delay(TimeSpan.FromSeconds(10), stoppingToken);
                }
            }

            _logger.LogInformation("\n--- –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ {Count} —Ç–∏–∫–æ–≤ ---", tickCount);

            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            await _pmmStrategy.StopAsync(CancellationToken.None);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
            _logger.LogInformation("\n");
            await _pmmTestHelper.ShowBalancesAsync(stoppingToken);
        }
        catch (OperationCanceledException)
        {
            _logger.LogInformation("–†–∞–±–æ—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ PMM —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏");
        }

        _logger.LogInformation("\n\n‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");

        // ========================================
        // –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MEXC API (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
        // ========================================
        // _logger.LogInformation("\n\nüß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í MEXC API\n");
        //
        // try
        // {
        //     await _mexcApiTester.RunAllTestsAsync(stoppingToken);
        // }
        // catch (Exception ex)
        // {
        //     _logger.LogError(ex, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ MEXC API");
        // }
        //
        // _logger.LogInformation("\n\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
        //
        // // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        // await Task.Delay(3000, stoppingToken);
        // Environment.Exit(0);
    }
}